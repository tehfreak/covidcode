{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","theme.ts","components/Codes/Codes.styles.ts","components/CodesCodelist/CodesCodelist.styles.ts","components/CodesCodelist/CodesCodelist.tsx","components/CodesCode/CodesCode.styles.ts","components/CodesCode/CodesCode.tsx","components/Codes/Codes.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","styles","createStyles","root","flexGrow","height","display","flexDirection","main","alignItems","justifyContent","nav","useStyles","makeStyles","name","CodesCodelist","AppBar","icon","fontSize","CodesCode","classes","className","Codes","CODELIST","id","primary","React","useState","codelist","setCodelist","useEffect","localStorage","getItem","JSON","parse","primaryCodes","useMemo","filter","item","length","path","to","Tabs","centered","map","Tab","label","component","NavLink","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85ffa102.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material/styles'\r\n\r\nexport const theme = createTheme({\r\n\r\n})\r\n","import { createStyles } from '@mui/styles'\r\nimport { Theme } from '@mui/material'\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n\r\n    main: {\r\n        flexGrow: 1,\r\n        height: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n    nav: {\r\n\r\n    },\r\n\r\n})\r\n\r\nexport default styles\r\n","import { createStyles } from '@mui/styles'\r\nimport { Theme } from '@mui/material'\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    root: {\r\n\r\n    },\r\n\r\n})\r\n\r\nexport default styles\r\n","import React from 'react'\r\nimport makeStyles from '@mui/styles/makeStyles'\r\nimport styles from './CodesCodelist.styles'\r\n\r\nimport AppBar from '@mui/material/AppBar'\r\n\r\nconst useStyles = makeStyles(styles, {\r\n    name: CodesCodelist.name,\r\n})\r\n\r\nexport default function CodesCodelist() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div>\r\n\r\n            <AppBar>\r\n                app bar\r\n            </AppBar>\r\n            codelist\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { createStyles } from '@mui/styles'\r\nimport { Theme } from '@mui/material'\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    root: {\r\n\r\n    },\r\n\r\n    icon: {\r\n        fontSize: 128,\r\n    },\r\n\r\n})\r\n\r\nexport default styles\r\n","import makeStyles from '@mui/styles/makeStyles'\r\nimport styles from './CodesCode.styles'\r\n\r\nimport AddIcon from '@mui/icons-material/Add'\r\n\r\nconst useStyles = makeStyles(styles, {\r\n    name: CodesCode.name,\r\n})\r\n\r\nexport default function CodesCode() {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <AddIcon className={classes.icon}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport makeStyles from '@mui/styles/makeStyles'\r\nimport styles from './Codes.styles'\r\n\r\nimport Tabs from '@mui/material/Tabs'\r\nimport Tab from '@mui/material/Tab'\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz'\r\nimport { Switch, Route, Redirect, NavLink } from 'react-router-dom'\r\nimport CodesCodelist from '../CodesCodelist/CodesCodelist'\r\nimport CodesCode from '../CodesCode/CodesCode'\r\n\r\nconst useStyles = makeStyles(styles, {\r\n    name: Codes.name,\r\n})\r\n\r\nconst CODELIST = [{ id:'1', name:'TEH', primary:true, }]\r\n\r\ntype codeType = { id:string, name:string, primary:boolean }\r\ntype codelistType = Array<codeType>\r\n\r\nexport default function Codes() {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [ codelist, setCodelist ] = React.useState<codelistType>([])\r\n\r\n    React.useEffect(() => {\r\n        let codelist\r\n        if (localStorage.getItem('codelist')) {\r\n            codelist = JSON.parse(localStorage.getItem('codelist')!)\r\n        } else {\r\n            codelist = CODELIST\r\n        }\r\n        setCodelist(codelist)\r\n    }, [])\r\n\r\n    const primaryCodes = React.useMemo(() => {\r\n        if (!codelist) {\r\n            return []\r\n        }\r\n        return codelist.filter((item) => item.primary)\r\n    }, [codelist])\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <div className={classes.main}>\r\n                {!!primaryCodes.length && (\r\n                    <Switch>\r\n\r\n                        <Route path=\"/codes/codelist\">\r\n                            <CodesCodelist/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/codes/code/:id\">\r\n                            <CodesCode/>\r\n                        </Route>\r\n\r\n                        <Redirect to={`/codes/code/${primaryCodes[0].id}`}/>\r\n\r\n                    </Switch>\r\n                )}\r\n            </div>\r\n\r\n            <Tabs\r\n                className={classes.nav}\r\n                centered\r\n            >\r\n\r\n                {primaryCodes.length > 1 && primaryCodes.map((item) => (\r\n                    <Tab\r\n                        key={item.id}\r\n                        label={item.name}\r\n                    />\r\n                ))}\r\n\r\n                <Tab\r\n                    icon={<MoreHorizIcon/>}\r\n                    component={NavLink}\r\n                    to=\"/codes/codelist\"\r\n                />\r\n\r\n            </Tabs>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport { StyledEngineProvider } from '@mui/material/styles'\nimport { ThemeProvider } from '@mui/material/styles'\nimport { theme } from './theme'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport { BrowserRouter } from 'react-router-dom'\nimport Codes from './components/Codes/Codes'\n\nReactDOM.render(\n    <React.StrictMode>\n        <StyledEngineProvider injectFirst>\n            <ThemeProvider theme={theme}>\n                <CssBaseline/>\n                <BrowserRouter>\n                    <Codes/>\n                </BrowserRouter>\n            </ThemeProvider>\n        </StyledEngineProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}